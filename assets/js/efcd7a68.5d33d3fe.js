"use strict";(self.webpackChunknoorg_docs=self.webpackChunknoorg_docs||[]).push([[353],{9136:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"usage/observer-examples","title":"Example Observers","description":"Before diving into specific observers, please read the Observer Pattern Introduction to understand how observers work in Noorg.","source":"@site/docs/usage/observer-examples.md","sourceDirName":"usage","slug":"/usage/observer-examples","permalink":"/docs/usage/observer-examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Observer Pattern in Noorg","permalink":"/docs/usage/observer-intro"},"next":{"title":"Dynamic Views with SQL","permalink":"/docs/usage/sql"}}');var s=r(4848),a=r(8453);const i={sidebar_position:5},o="Example Observers",d={},l=[{value:"Core Observers",id:"core-observers",level:2},{value:"1. Timestamp Observer (Rust)",id:"1-timestamp-observer-rust",level:3},{value:"2. Tabble of Contents Observer (Rust)",id:"2-tabble-of-contents-observer-rust",level:3},{value:"3. Tag Index Observer (Rust)",id:"3-tag-index-observer-rust",level:3},{value:"4. Content Metrics Observer (Python)",id:"4-content-metrics-observer-python",level:3},{value:"5. Kanban Board Observer (Python)",id:"5-kanban-board-observer-python",level:3},{value:"6. Time Tracker Observer",id:"6-time-tracker-observer",level:3},{value:"7. Inline Tags Observer (Python)",id:"7-inline-tags-observer-python",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"example-observers",children:"Example Observers"})}),"\n",(0,s.jsxs)(n.p,{children:["Before diving into specific observers, please read the ",(0,s.jsx)(n.a,{href:"/docs/usage/observer-intro",children:"Observer Pattern Introduction"})," to understand how observers work in Noorg."]}),"\n",(0,s.jsx)(n.h2,{id:"core-observers",children:"Core Observers"}),"\n",(0,s.jsx)(n.h3,{id:"1-timestamp-observer-rust",children:"1. Timestamp Observer (Rust)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"timestamp.rs"})," - Manages note timestamps"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Tracks creation and modification times"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Functionality"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Adds ",(0,s.jsx)(n.code,{children:"created_at"})," on new note creation"]}),"\n",(0,s.jsxs)(n.li,{children:["Updates ",(0,s.jsx)(n.code,{children:"updated_at"})," on every modification"]}),"\n",(0,s.jsx)(n.li,{children:"Preserves original creation date"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"created_at: 2024-03-14 15:23:45 +0100\nupdated_at: 2024-03-14 16:45:12.123456 +0100\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use crate::event::{NoteEvent, NoteObserver, ObserverResult};\nuse chrono::Local;\nuse std::any::Any;\nuse std::collections::HashMap;\nuse std::future::Future;\nuse std::pin::Pin;\nuse tracing::{debug, info};\n\npub struct TimestampObserver;\n\nimpl NoteObserver for TimestampObserver {\n    fn on_event_boxed(\n        &self,\n        event: NoteEvent,\n    ) -> Pin<Box<dyn Future<Output = std::io::Result<Option<ObserverResult>>> + Send + \'_>> {\n        Box::pin(async move {\n            let mut metadata = HashMap::new();\n            match event {\n                NoteEvent::Created {\n                    title, frontmatter, ..\n                } => {\n                    debug!("Processing creation timestamp for \'{}\'", title);\n\n                    if !frontmatter.contains_key("created_at") {\n                        let created_at = Local::now().format("%Y-%m-%d %H:%M:%S %z").to_string();\n                        debug!("Setting initial created_at: {}", created_at);\n                        metadata.insert("created_at".to_string(), created_at);\n                    }\n\n                    let updated_at = Local::now().format("%Y-%m-%d %H:%M:%S.%f %z").to_string();\n                    debug!("Setting updated_at: {}", updated_at);\n                    metadata.insert("updated_at".to_string(), updated_at);\n\n                    info!("\u2728 Timestamps initialized for new note \'{}\'", title);\n                }\n                NoteEvent::Updated {\n                    title, frontmatter, ..\n                }\n                | NoteEvent::Synced {\n                    title, frontmatter, ..\n                } => {\n                    debug!("Processing update timestamp for \'{}\'", title);\n\n                    if let Some(created) = frontmatter.get("created_at") {\n                        debug!("Preserving existing created_at: {}", created);\n                        metadata.insert("created_at".to_string(), created.clone());\n                    }\n\n                    let updated_at = Local::now().format("%Y-%m-%d %H:%M:%S.%f %z").to_string();\n                    debug!("Setting updated_at: {}", updated_at);\n                    metadata.insert("updated_at".to_string(), updated_at);\n\n                    info!("\u2728 Updated timestamp for \'{}\'", title);\n                }\n            }\n\n            Ok(Some(ObserverResult {\n                metadata: Some(metadata),\n                content: None,\n            }))\n        })\n    }\n\n    fn name(&self) -> String {\n        "timestamp".to_string()\n    }\n\n    fn as_any(&self) -> &dyn Any {\n        self\n    }\n\n    fn priority(&self) -> i32 {\n        0 // Run after metadata generation but before storage\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-tabble-of-contents-observer-rust",children:"2. Tabble of Contents Observer (Rust)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toc.rs"})," - Generates a table of contents"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Creates a table of contents based on headings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Parses Markdown headlines"}),"\n",(0,s.jsx)(n.li,{children:"Creates anchor links"}),"\n",(0,s.jsx)(n.li,{children:"Updates on content changes"}),"\n",(0,s.jsx)(n.li,{children:"skips first H1 title"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"## Contents\n\n* Introduction\n  * Getting Started\n  * Prerequisites\n"})}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/src/observers/toc.rs",children:"toc.rs"})," for the full implementation."]}),"\n",(0,s.jsx)(n.h3,{id:"3-tag-index-observer-rust",children:"3. Tag Index Observer (Rust)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tag_index.rs"})," - Manages a central tag index"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Tracks all tags and associated notes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extracts tags from frontmatter"}),"\n",(0,s.jsxs)(n.li,{children:["Generates ",(0,s.jsx)(n.code,{children:"_tag_index.md"})]}),"\n",(0,s.jsx)(n.li,{children:"Creates relative links"}),"\n",(0,s.jsx)(n.li,{children:"Updates on content changes"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"## rust\n- [Project A](./Project A.md)\n- [Setup Guide](./Setup Guide.md)\n\n## python\n- [Script Notes](./Script Notes.md)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/src/observers/tag_index.rs",children:"tag_index.rs"})," for the full implementation."]}),"\n",(0,s.jsx)(n.h3,{id:"4-content-metrics-observer-python",children:"4. Content Metrics Observer (Python)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"content_metrics_generator.py"})," - Calculates content metrics"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Generates content metrics for notes"]}),"\n",(0,s.jsxs)(n.li,{children:["Metrics:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Word count"}),"\n",(0,s.jsx)(n.li,{children:"Character count"}),"\n",(0,s.jsx)(n.li,{children:"Link count"}),"\n",(0,s.jsx)(n.li,{children:"Header counting"}),"\n",(0,s.jsx)(n.li,{children:"Top words"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'word_count: "440"\nchar_count: "2345"\nsentence_count: "15"\navg_words_per_sentence: "29.3"\nlink_count: "5"\nheader_count: "3"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/resources/default_scripts/python/content_metrics_generator.py",children:"content_metrics_generator.py"})," for the full implementation."]}),"\n",(0,s.jsx)(n.h3,{id:"5-kanban-board-observer-python",children:"5. Kanban Board Observer (Python)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"kanban_board.py"})," - Task management system"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"kanban board",src:r(7204).A+"",width:"1920",height:"1080"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Creates interactive kanban board from tasks"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extracts tasks with #todo #doing #done inline tags"}),"\n",(0,s.jsx)(n.li,{children:"Tracks states: planned, todo, doing, done"}),"\n",(0,s.jsx)(n.li,{children:"Maintains task context"}),"\n",(0,s.jsxs)(n.li,{children:["Generates ",(0,s.jsx)(n.code,{children:"_kanban.md"})]}),"\n",(0,s.jsxs)(n.li,{children:["After a tag like #doing you can add a description in () like this ",(0,s.jsx)(n.code,{children:"#todo(working on feature X)"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"\ud83d\udcc5 Planned"}),(0,s.jsx)(n.th,{children:"\u2705 Todo"}),(0,s.jsx)(n.th,{children:"\ud83c\udfc3 Doing"}),(0,s.jsx)(n.th,{children:"\u2728 Done"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Implements user authentication\ud83d\udcce ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"link to note"})]}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["update the github repo\ud83d\udcce ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"link to note"})]}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Refactors database queries\ud83d\udcce ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"link to note"})]}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Updates documentation\ud83d\udcce ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"link to note"})]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/resources/default_scripts/python/kanban_board.py",children:"kanban_board.py"})," for the full implementation."]}),"\n",(0,s.jsx)(n.h3,{id:"6-time-tracker-observer",children:"6. Time Tracker Observer"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"time_tracker.py"})," - Time management and tracking"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"time tracker",src:r(6663).A+"",width:"1920",height:"1080"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Tracks time spent on different topics/tasks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tracks work blocks and breaks"}),"\n",(0,s.jsx)(n.li,{children:"Calculates daily/weekly hours"}),"\n",(0,s.jsx)(n.li,{children:"Configurable work hours/days"}),"\n",(0,s.jsx)(n.li,{children:"Vacation tracking"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"expected_hours_per_week: 40\nworkdays: [Monday, Tuesday, Wednesday, Thursday, Friday]\nvacation_days_per_year: 30\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n# \u23f1\ufe0f Time Tracker\n\n## Configuration\nExpected Hours per Week: 20.0\nWorkdays: Monday, Tuesday, Wednesday, Thursday, Friday\nVacation Days per Year: 30\n\n### Overall Summary\nTotal hours worked: 116.50h\nExpected hours: 320.00h\nBalance: -203.50h\n\nStatus: \u26a0\ufe0f Behind schedule\n\n### Weekly Summary\n\n| Week | Dates | Hours Worked | Expected Hours | Balance | Cumulative Balance |\n|------|-------|--------------|----------------|---------|-------------------|\n| 2024-W49 | 2024-12-02 to 2024-12-08 | 39.00h | 20.00h | +19.00h | +19.00h |\n| 2024-W13 | 2024-03-25 to 2024-03-31 | 29.00h | 20.00h | +9.00h | +28.00h |\n| 2024-W12 | 2024-03-18 to 2024-03-24 | 0.00h | 20.00h | -20.00h | +8.00h |\n| 2024-W09 | 2024-02-26 to 2024-03-03 | 18.50h | 20.00h | -1.50h | +6.50h |\n| 2024-W08 | 2024-02-19 to 2024-02-25 | 6.00h | 20.00h | -14.00h | -7.50h |\n| 2024-W05 | 2024-01-29 to 2024-02-04 | 12.00h | 20.00h | -8.00h | -15.50h |\n| 2024-W04 | 2024-01-22 to 2024-01-28 | 12.00h | 20.00h | -8.00h | -23.50h |\n\n### Monthly Summary\n\n#### 2024-01\nHours worked: 24.00h\nExpected hours: 80.00h\nBalance: -56.00h\nVacation days: 1\nSick days: 0\n\n#### 2024-02\nHours worked: 24.50h\nExpected hours: 80.00h\nBalance: -55.50h\nVacation days: 0\nSick days: 1\n\n#### 2024-03\nHours worked: 29.00h\nExpected hours: 80.00h\nBalance: -51.00h\nVacation days: 1\nSick days: 1\n\n#### 2024-12\nHours worked: 39.00h\nExpected hours: 80.00h\nBalance: -41.00h\nVacation days: 0\nSick days: 0\n\n\n## Time Entries\n| Date | Type | Work Times | Break Times | Notes |\n|------|------|------------|-------------|--------|\n| 2024-12-05 | workday | 06:00-12:00,13:00-20:00 | 12:00-13:00 | Regular work day |\n| 2024-12-04 | workday | 06:00-12:00,13:00-20:00 | 12:00-13:00 | Regular work day |\n| 2024-12-03 | workday | 06:00-12:00,13:00-23:00 | 12:00-13:00 | Regular work day |\n| 2024-03-29 | workday | 09:00-12:00,13:00-20:00 | 12:00-13:00 | Regular work day |\n| 2024-03-28 | workday | 09:00-12:00,13:00-19:00 | 12:00-13:00 | Regular work day |\n| 2024-03-27 | workday | 09:30-12:00,13:00-17:30 | 12:00-13:00 | Team meeting |\n| 2024-03-26 | vacation | - | - | Spring break |\n| 2024-03-25 | workday | 08:30-12:00,13:00-16:30 | 12:00-13:00 | Project planning |\n| 2024-03-22 | sick | - | - | Doctor's appointment |\n| 2024-02-29 | workday | 09:00-12:00,13:00-17:30 | 12:00-13:00 | Sprint review |\n| 2024-02-28 | workday | 09:00-12:00,13:00-17:00 | 12:00-13:00 | Regular work day |\n| 2024-02-27 | workday | 08:30-12:00,13:00-16:30 | 12:00-13:00 | Team workshop |\n| 2024-02-26 | sick | - | - | Flu |\n| 2024-02-23 | workday | 09:30-12:00,13:00-17:30 | 12:00-13:00 | Client meeting |\n| 2024-01-31 | workday | 09:00-12:00,13:00-17:00 | 12:00-13:00 | Month-end review |\n| 2024-01-30 | workday | 09:00-12:00,13:00-17:00 | 12:00-13:00 | Regular work day |\n| 2024-01-29 | vacation | - | - | Winter break |\n| 2024-01-26 | workday | 09:30-12:00,13:00-17:30 | 12:00-13:00 | Planning session |\n| 2024-01-25 | workday | 08:30-12:00,13:00-16:30 | 12:00-13:00 | Regular work day |\n\x3c!-- Format: Work Times: 09:00-12:00,13:00-17:00 | Break Times: 12:00-13:00 --\x3e\n"})}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/resources/default_scripts/python/time_tracker.py",children:"time_tracker.py"})," for the full implementation."]}),"\n",(0,s.jsx)(n.h3,{id:"7-inline-tags-observer-python",children:"7. Inline Tags Observer (Python)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline_tags.py"})," - Extracts inline tags from notes"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Extracts inline tags from notes and add them to the frontmatter."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extracts tags from inline text"}),"\n",(0,s.jsx)(n.li,{children:"Excludes heading anchors"}),"\n",(0,s.jsx)(n.li,{children:"Adds tags to frontmatter"}),"\n",(0,s.jsx)(n.li,{children:"Updates on content changes"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Output"}),": ",(0,s.jsx)(n.code,{children:"#project"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["-> See ",(0,s.jsx)(n.a,{href:"https://github.com/realjockel/noorg/blob/main/resources/default_scripts/python/inline_tags.py",children:"inline_tags.py"})," for the full implementation."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},7204:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/kanban-8775e94e405569ac1f6a11eebce98e48.gif"},6663:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/time_tracker-cc5e580950f183510115049be1db1c09.gif"},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);