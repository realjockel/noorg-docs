"use strict";(self.webpackChunknoorg_docs=self.webpackChunknoorg_docs||[]).push([[7194],{9191:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"usage/sql","title":"Dynamic Views with SQL","description":"SQL Executor","source":"@site/docs/usage/sql.md","sourceDirName":"usage","slug":"/usage/sql","permalink":"/docs/usage/sql","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Example Observers","permalink":"/docs/usage/observer-examples"},"next":{"title":"Lua Executor","permalink":"/docs/usage/lua-executor"}}');var i=s(4848),l=s(8453);const a={sidebar_position:5},r="Dynamic Views with SQL",d={},o=[{value:"Database Schema",id:"database-schema",level:2},{value:"Tables",id:"tables",level:3},{value:"Query Syntax",id:"query-syntax",level:2},{value:"Query Examples",id:"query-examples",level:2},{value:"1. Find Notes by Tag",id:"1-find-notes-by-tag",level:3},{value:"2. Filter by Metadata Value",id:"2-filter-by-metadata-value",level:3},{value:"3. Complex Queries with Multiple Joins",id:"3-complex-queries-with-multiple-joins",level:3},{value:"How it works",id:"how-it-works",level:2},{value:"Common Metadata Fields",id:"common-metadata-fields",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dynamic-views-with-sql",children:"Dynamic Views with SQL"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"SQL Executor",src:s(6571).A+"",width:"1920",height:"1080"})}),"\n",(0,i.jsx)(n.p,{children:"Noorg's SQL executor enables dynamic views of your notes by storing metadata in SQLite and allowing SQL queries embedded in your notes."}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.h3,{id:"tables",children:"Tables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"notes"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE notes (\n    id INTEGER PRIMARY KEY,\n    title TEXT UNIQUE NOT NULL,\n    path TEXT NOT NULL\n)\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"frontmatter"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE frontmatter (\n    file_id INTEGER,\n    key TEXT,\n    value TEXT,\n    PRIMARY KEY (file_id, key),\n    FOREIGN KEY (file_id) REFERENCES notes(id)\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"query-syntax",children:"Query Syntax"}),"\n",(0,i.jsx)(n.p,{children:"Add SQL queries to your notes using code blocks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT n.id, n.title, n.path\nFROM notes n \nJOIN frontmatter f ON n.id = f.file_id \nWHERE f.key = 'tags' AND f.value LIKE '%project%'\n"})}),"\n",(0,i.jsx)(n.p,{children:"Results appear as Markdown tables:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"title"}),(0,i.jsx)(n.th,{children:"path"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"Project Notes"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/usage/sql",children:"Project Notes"})})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"query-examples",children:"Query Examples"}),"\n",(0,i.jsx)(n.h3,{id:"1-find-notes-by-tag",children:"1. Find Notes by Tag"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT n.id, n.title, n.path\nFROM notes n \nJOIN frontmatter f ON n.id = f.file_id \nWHERE f.key = 'tags' AND f.value LIKE '%project%'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-filter-by-metadata-value",children:"2. Filter by Metadata Value"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT n.id, n.title, n.path\nFROM notes n\nJOIN frontmatter f ON n.id = f.file_id\nWHERE f.key = 'link_count' \nAND CAST(f.value AS INTEGER) > 5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-complex-queries-with-multiple-joins",children:"3. Complex Queries with Multiple Joins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT \n    n.title,\n    n.path,\n    f1.value as updated_at,\n    f2.value as word_count,\n    f3.value as tags\nFROM notes n\nJOIN frontmatter f1 ON n.id = f1.file_id AND f1.key = 'updated_at'\nJOIN frontmatter f2 ON n.id = f2.file_id AND f2.key = 'word_count'\nJOIN frontmatter f3 ON n.id = f3.file_id AND f3.key = 'tags'\nWHERE f1.value LIKE '2024-12-06%'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each note's metadata is stored in the ",(0,i.jsx)(n.code,{children:"frontmatter"})," table."]}),"\n",(0,i.jsxs)(n.li,{children:["Note ",(0,i.jsx)(n.code,{children:"paths"})," and ",(0,i.jsx)(n.code,{children:"titles"})," are stored in the ",(0,i.jsx)(n.code,{children:"notes"})," table"]}),"\n",(0,i.jsxs)(n.li,{children:["Key-value pairs from frontmatter become rows in ",(0,i.jsx)(n.code,{children:"frontmatter"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Processing"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SQL blocks are detected in note content"}),"\n",(0,i.jsx)(n.li,{children:"Queries are executed against the SQLite database"}),"\n",(0,i.jsx)(n.li,{children:"Results are formatted as Markdown tables and inserted into the note"}),"\n",(0,i.jsx)(n.li,{children:"Original content is replaced with updated results"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auto-Updates"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Results are updated automatically when the note is processed"}),"\n",(0,i.jsx)(n.li,{children:"Queries re-run on each save"}),"\n",(0,i.jsx)(n.li,{children:"Tables are refreshed with the latest data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-metadata-fields",children:"Common Metadata Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"word_count"}),": Number of words"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"char_count"}),": Character count"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"link_count"}),": Number of links"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tags"}),": Note tags"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updated_at"}),": Last modification time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"created_at"}),": Creation timestamp"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},6571:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/sql-71dfc93d6558228ac68fc33615acc2f3.gif"},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);